<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>彻底理解cookie、session、token</title>
    <url>//blog/cookies.html</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/01/15/HngdtjmNiYU89Tq.png" alt="cookie.JPG"></p>
<blockquote>
<p>原创作者: 墨颜丶<br>转载链接:<a href="http://www.cnblogs.com/moyand/p/9047978.html" target="_blank" rel="noopener">http://www.cnblogs.com/moyand/p/9047978.html</a></p>
</blockquote>
<h3 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h3><p>1、很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议，就是请求加响应，尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮。</p>
<p>2、但是随着交互式Web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须记住哪些人登录系统，哪些人往自己的购物车中放商品，也就是说我必须把每个人区分开，这就是一个不小的挑战，因为HTTP请求是无状态的，所以想出的办法就是给大家发一个会话标识(session id),说白了就是一个随机的字串，每个人收到的都不一样，每次大家向我发起HTTP请求的时候，把这个字符串给一并捎过来，这样我就能区分开谁是谁了</p>
<p>3、这样大家很嗨皮了，可是服务器就不嗨皮了，每个人只需要保存自己的session id，而服务器要保存所有人的session id ！如果访问服务器多了，就得由成千上万，甚至几十万个。</p>
<p>这对服务器说是一个巨大的开销，严重的限制了服务器扩展能力，比如说我用两个机器组成了一个集群， 小F通过机器A登录了系统， 那session id会保存在机器A上，假设小F的下一次请求被转发到机器B怎么办？机器B可没有小F的 session id啊。</p>
<p>有时候会采用一点小伎俩：<strong>session sticky</strong>，就是让小F的请求一直粘连在机器A上，但是这也不管用， 要是机器A挂掉了， 还得转到机器B去。</p>
<p>那只好做session 的复制了，把session id 在两个机器之间搬来搬去，快累死了。</p>
<p><img src="https://i.loli.net/2019/10/18/tRaPnHEUyihcLCv.jpg" alt="1.jpg"></p>
<p>后来有个叫Memcached的支了招：把session id 集中存储到一个地方，所有的机器都来访问这个地方的数据，这样一来，就不用复制了，但是增加了单点失败的可能性，要是那个负责session 的机器挂了，所有人都得重新登录一遍，估计得被人骂死。</p>
<p><img src="https://i.loli.net/2019/10/18/lrFLkSV5JfbDMdO.jpg" alt="1.jpg"></p>
<p>也尝试把这个单点的机器也搞出集群，增加可靠性，但不管如何，这小小的session 对我来说是一个沉重的负担</p>
<p>4、于是有人就一直在思考，我为什么要保存这可恶的session呢，只让每个客户端去保存该多好？</p>
<p>可是<strong>如果不保存这些session id , 怎么验证客户端发给我的session id 的确是我生成的呢？</strong> 如果不去验证，我们都不知道他们是不是合法登录的用户，那些不怀好意的家伙们就可以伪造session id , 为所欲为了。</p>
<p>嗯，对了，关键点就是验证 ！</p>
<p>比如说，小F已经登录了系统，我给他发一个令牌(token)，里边包含了小F的 user id，下一次小F 再次通过Http 请求访问我的时候，把这个token 通过Http header 带过来不就可以了。</p>
<p>不过这和session id没有本质区别啊，任何人都可以可以伪造，所以我得想点儿办法，让别人伪造不了。</p>
<p>那就对数据做一个签名吧，比如说我用HMAC-SHA256 算法，加上一个只有我才知道的密钥， 对数据做一个签名， 把这个签名和数据一起作为token，由于密钥别人不知道，就无法伪造token了。</p>
<p><img src="https://i.loli.net/2019/10/18/E83uJwDXSMzlQqr.jpg" alt="1.jpg"></p>
<p>这个token 我不保存， 当小F把这个token 给我发过来的时候，我再用同样的HMAC-SHA256 算法和同样的密钥，对数据再计算一次签名， 和token 中的签名做个比较，如果相同，我就知道小F已经登录过了，并且可以直接取到小F的user id , 如果不相同，数据部分肯定被人篡改过，我就告诉发送者：对不起，没有认证。</p>
<p><img src="https://i.loli.net/2019/10/18/zNytEpsdVJP7kOj.jpg" alt="1.jpg"></p>
<p>Token 中的数据是明文保存的（虽然我会用Base64做下编码， 但那不是加密），还是可以被别人看到的， 所以我不能在其中保存像密码这样的敏感信息。</p>
<p>当然，如果一个人的token 被别人偷走了，那我也没办法，我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。</p>
<p>这样一来，我就不保存session id 了，我只是生成token, 然后验证token，我用我的CPU计算时间获取了我的session 存储空间 ！</p>
<p>解除了session id这个负担，可以说是无事一身轻，我的机器集群现在可以轻松地做水平扩展，用户访问量增大，直接加机器就行。这种无状态的感觉实在是太好了！</p>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。</p>
<p>cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的</p>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。</p>
<p>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p>
<p>服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</p>
<h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。</p>
<p>以下几点特性会让你在程序中使用基于Token的身份验证</p>
<ol>
<li><p>无状态、可扩展</p>
</li>
<li><p>支持移动设备</p>
</li>
<li><p>跨程序调用</p>
</li>
<li><p>安全</p>
</li>
</ol>
<p>那些使用基于Token的身份验证的大佬们</p>
<p>大部分你见到过的API和Web应用都使用tokens。例如Facebook, Twitter, Google+, GitHub等。</p>
<h3 id="Token的起源"><a href="#Token的起源" class="headerlink" title="Token的起源"></a>Token的起源</h3><p>在介绍基于<a href="https://mp.weixin.qq.com/s?__biz=MzU2MTI4MjI0MQ==&amp;mid=2247485987&amp;idx=1&amp;sn=f0a1f851bec006e7aacbc0d5e183bac1&amp;chksm=fc7a678dcb0dee9bb0619e363833f9e43f3c61ad57cf40a46cfb1d3ac840a90af51ea0a96ac0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Token的身份验证</a>的原理与优势之前，不妨先看看之前的认证都是怎么做的。</p>
<h5 id="基于服务器的验证"><a href="#基于服务器的验证" class="headerlink" title="基于服务器的验证"></a>基于服务器的验证</h5><p>我们都是知道HTTP协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。</p>
<p>在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储Session来完成。</p>
<p>随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。</p>
<h5 id="基于服务器验证方式暴露的一些问题"><a href="#基于服务器验证方式暴露的一些问题" class="headerlink" title="基于服务器验证方式暴露的一些问题"></a>基于服务器验证方式暴露的一些问题</h5><ol>
<li><p><strong>Seesion</strong>：每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。</p>
</li>
<li><p><strong>可扩展性</strong>：在服务端的内存中使用Seesion存储登录信息，伴随而来的是可扩展性问题。</p>
</li>
<li><p><strong>CORS(跨域资源共享)</strong>：当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可以会出现禁止请求的情况。</p>
</li>
<li><p><strong>CSRF(跨站请求伪造)</strong>：用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。</p>
</li>
</ol>
<p>在这些问题中，可扩展行是最突出的。因此我们有必要去寻求一种更有行之有效的方法。</p>
<h5 id="基于Token的验证原理"><a href="#基于Token的验证原理" class="headerlink" title="基于Token的验证原理"></a>基于Token的验证原理</h5><p>基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中。</p>
<p>这种概念解决了在服务端存储信息时的许多问题</p>
<blockquote>
<p>NoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。</p>
</blockquote>
<p>基于Token的身份验证的过程如下:</p>
<ol>
<li><p>用户通过用户名和密码发送请求。</p>
</li>
<li><p>程序验证。</p>
</li>
<li><p>程序返回一个签名的token 给客户端。</p>
</li>
<li><p>客户端储存token,并且每次用于每次发送请求。</p>
</li>
<li><p>服务端验证token并返回数据。</p>
</li>
</ol>
<p>每一次请求都需要token。token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性Access-Control-Allow-Origin:* ，让服务器能接受到来自所有域的请求。</p>
<p>需要主要的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。</p>
<p>实现思路：</p>
<p><img src="https://i.loli.net/2019/10/18/t3GijCKN7DTleU8.jpg" alt="1.jpg"></p>
<ol>
<li>用户登录校验，校验成功后就返回Token给客户端。</li>
<li>客户端收到数据后保存在客户端</li>
<li>客户端每次访问API是携带Token到服务器端。</li>
<li>服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码</li>
</ol>
<p>当我们在程序中认证了信息并取得token之后，我们便能通过这个Token做许多的事情。</p>
<p>我们甚至能基于创建一个基于权限的token传给第三方应用程序，这些第三方程序能够获取到我们的数据（当然只有在我们允许的特定的token）</p>
<h3 id="Tokens的优势"><a href="#Tokens的优势" class="headerlink" title="Tokens的优势"></a>Tokens的优势</h3><h5 id="无状态、可扩展"><a href="#无状态、可扩展" class="headerlink" title="无状态、可扩展"></a>无状态、可扩展</h5><p>在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。</p>
<p>如果我们将已验证的用户的信息保存在Session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为Session亲和性)。用户量大时，可能会造成一些拥堵。</p>
<h5 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h5><p>请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。</p>
<p>token是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过token revocataion可以使一个特定的token或是一组有相同认证的token无效。</p>
<h5 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h5><p>Tokens能够创建与其它程序共享权限的程序。例如，能将一个随便的社交帐号和自己的大号(Fackbook或是Twitter)联系起来。当通过服务登录Twitter(我们将这个过程Buffer)时，我们可以将这些Buffer附到Twitter的数据流上(we are allowing Buffer to post to our Twitter stream)。</p>
<p>使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据，我们可以通过建立自己的API，得出特殊权限的tokens。</p>
<h5 id="多平台跨域"><a href="#多平台跨域" class="headerlink" title="多平台跨域"></a>多平台跨域</h5><p>我们提前先来谈论一下CORS(跨域资源共享)，对应用程序和服务进行扩展的时候，需要介入各种各种的设备和应用程序。</p>
<blockquote>
<p>Having our API just serve data, we can also make the design choice to serve assets from a CDN. This eliminates the issues that CORS brings up after we set a quick header configuration for our application.</p>
</blockquote>
<p>只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。</p>
<blockquote>
<p>Access-Control-Allow-Origin: *</p>
</blockquote>
<p>基于标准创建token的时候，你可以设定一些选项。我们在后续的文章中会进行更加详尽的描述，但是标准的用法会在JSON Web Tokens体现。</p>
<p>最近的程序和文档是供给JSON Web Tokens的。它支持众多的语言。这意味在未来的使用中你可以真正的转换你的认证机制。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>面试总结-接口自动化面试题</title>
    <url>//blog/Interview-sharing.html</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/01/15/25bjPOHnc1f9Mse.jpg" alt="mianshi.JPG"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面总结了一篇关于接口测试的常规面试题，现在接口自动化测试用的比较多，也是被很多公司看好。那么想做接口自动化测试需要具备哪些能力呢？<br>也就是面试的过程中，面试官会考哪些问题，知道你是不是真的做过接口自动化测试？总的来说问的比较多的就是以下几个问题：</p>
<p>1.json和字典的区别？  -对基础数据类型的考察<br>2.测试的数据你放在哪？  -数据与脚本分离<br>3.参数化  - 数据驱动模式<br>4.下个接口请求参数依赖上个接口的返回数据 - 参数关联<br>5.依赖于登录的接口如何处理 -token和session的管理<br>6.依赖第三方的接口如何处理  -mock模拟数据返回<br>7.不可逆的操作，如何处理，比如删除一个订单这种接口如何测试 -造数据<br>8.接口产生的垃圾数据如何清理 - 数据清理<br>9.一个订单的几种状态如何全部测到，如：未处理，处理中，处理失败，处理成功  - 造数据，改数据库订单状态<br>10.python如何连接数据库操作？<br>11.其它的就是运行出报告、代码管理（git）、运行策略和持续集成jenkins相关了</p>
<h1 id="1-json和字典的区别？"><a href="#1-json和字典的区别？" class="headerlink" title="1.json和字典的区别？"></a>1.json和字典的区别？</h1><p>字典是一种数据结构，而json是一种格式；字典有很多内置函数，有多种调用方法，而json是数据打包的一种格式，并不像字典具备操作性，并且是格式就会有一些形式上的限制，比如json的格式要求必须且只能使用双引号作为key或者值的边界符号，不能使用单引号，而且“key”必须使用边界符（双引号），但字典就无所谓了。<br>import json</p>
<p>a是字典dict<br>a = {“a”: 1, “b”: 2, “c”: True}</p>
<p>b是json<br>b = ‘{“a”: 1, “b”: 2, “c”: true}’</p>
<p>print(type(a))<br>print(json.dumps(a))   # a转json<br>运行结果</p>
<p>{“a”: 1, “b”: 2, “c”: true}</p>
<p>{‘a’: 1, ‘b’: 2, ‘c’: True}</p>
<h1 id="2-测试的数据你放在哪？"><a href="#2-测试的数据你放在哪？" class="headerlink" title="2.测试的数据你放在哪？"></a>2.测试的数据你放在哪？</h1><p>测试数据到底该怎么放，这个是面试官最喜欢问的一个题了，似乎仁者见仁智者见智，没有标准的答案，有的人说放excel，也有的说放.py脚本，也有的说放ini配置文件，<br>还有放到json，yaml文件，txt文件，甚至有的放数据库，五花八门，一百个做自动化的小伙伴有100个放的地方。</p>
<p>这里总结下测试的数据到底该怎么放？</p>
<p>首先测试的数据是分很多种的，有登录的账户数据，也有注册的账户数据，还有接口的参数，还有邮箱配置的数据等等等等，所以这个题不能一概而论给答死了。要不然就是给自己挖坑。</p>
<p>以下两个大忌不能回答：</p>
<p>测试的数据是不能写死到代码里面的，这个是原则问题，也是写代码的大忌（你要是回答写在代码里面，估计就是回去等通知了）</p>
<p>测试数据放到.py的开头，这种其实很方便，对于少量的，固定不变的数据其实是可以放的，但是面试时候，千万不能这样说，面试官喜欢装逼的方法</p>
<p>测试数据存放总结：</p>
<p>1.对于账号密码，这种管全局的参数，可以用命令行参数，单独抽出来，写的配置文件里（如ini）<br>2.对于一些一次性消耗的数据，比如注册，每次注册不一样的数，可以用随机函数生成<br>3.对于一个接口有多组测试的参数，可以参数化，数据放yaml,text,json,excel都可以<br>4.对于可以反复使用的数据，比如订单的各种状态需要造数据的情况，可以放到数据库，每次数据初始化，用完后再清理<br>5.对于邮箱配置的一些参数，可以用ini配置文件<br>6.对于全部是独立的接口项目，可以用数据驱动方式，用excel/csv管理测试的接口数据<br>7.对于少量的静态数据，比如一个接口的测试数据，也就2-3组，可以写到py脚本的开头，十年八年都不会变更的</p>
<p>总之不同的测试数据，可以用不同的文件管理</p>
]]></content>
      <categories>
        <category>面试那些事</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>接口自动化测试</title>
    <url>//blog/auto-interface-test.html</url>
    <content><![CDATA[<h1 id="自动化测试模型"><a href="#自动化测试模型" class="headerlink" title="自动化测试模型"></a><strong>自动化测试模型</strong></h1><p>自动化测试模型可以看作是自动化测试框架设计的思想，这里介绍4种模型：线性测试、模块化驱动测试、数据驱动测试、关键字驱动测试。<br>1.线性测试：每个测试脚本都是完整且独立的，且不产生依赖与调用，缺点显而易见，开发和维护成本很高<br>2.模块化驱动测试：借鉴了编程语言中模块的思想（比如Python的包），把重复的操作当作了独立的公共模块，当用例执行过程中需要用到这一模块操作时则被调用，这样就最大程度地消除了重复，从而提高了开发效率和可维护性。<br>3.数据驱动测试：顾名思义就是数据的改变从而驱动自动化测试的执行，就是数据的参数化，因为输入的数据不同从而引起输出结果的不同，实现数据与脚本的分离，进一步增强了脚本的复用性。<br>4.关键字驱动测试：就是在数据驱动的基础上，把“数据”换成“关键字”，通过关键字来引起测试结果的改变。</p>
<h1 id="自动化接口框架设计"><a href="#自动化接口框架设计" class="headerlink" title="自动化接口框架设计"></a><strong>自动化接口框架设计</strong></h1><p>选用模型：数据驱动+关键字驱动+模块化驱动<br>设计理由：<br>1.使用数据驱动，实现数据与脚本分离的，增强脚本复用性<br>   2.使用关键字驱动，通过关键字来查找数据，可以使测试所需数据从单一文本转移，由多个文件存储数据，看起来不是很笨重<br>   3.使用模块化驱动，对数据的重复操作的功能可以写成公共模块，举例：对excel的操作数据模块，构造请求模块，发送测试报告邮件模块。<br>设计方案：<br>数据驱动+关键字驱动<br>包名：case_data<br>模块名称:interface.xlsx,case.json<br>取名为interface.xlsx的excel文件来存储测试用例,case.json文本存储关键字的值<br>字段设计：<br>1.case_id ：记录用例号<br>2.名称：case_id说明<br>3.url：请求地址<br>4.run：有两个值，yes 和 no,判断用例是否需要执行<br>5.请求方式：有GET 和 POST两个值，来判断使用哪一种请求方式<br>6.headers：由关键字驱动，其值存储在case.json文本中，headers为空，则表示不需要headers<br>7.cookie：有yes 和 no两个值，来判断是否需要携带cookie<br>8.依赖case：某些请求的headers或body中可能需要上一个请求的响应中的值，依赖case指出需要依赖哪一个case<br>9.返回依赖数据：指被依赖的case的字段，一般json格式的响应结果为嵌套式的dictionary，这里举例关键字：info.toke，<br>假设</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">respose=&#123;<span class="string">'data'</span>：<span class="string">'mini'</span>,</span><br><span class="line">	    infor:<span class="string">'&#123;</span></span><br><span class="line"><span class="string">                '</span>token<span class="string">':'</span>unknown<span class="string">',</span></span><br><span class="line"><span class="string">                 '</span>num<span class="string">':'</span><span class="number">3</span><span class="string">'</span></span><br><span class="line"><span class="string">          &#125;</span></span><br></pre></td></tr></table></figure>
<p>我们要取的值为response[‘info’][‘token’]，由方法来实现<br>10.数据依赖字段：若该字段为：Authorization则’Authorization’:’response[‘infor’][‘token’]’，根据8，9，获取上一个请求响应中所需数据<br>11.依赖需要：此处取3个值，headers、data、空<br>headers：表示数据依赖放在headers的字典里<br>data，表示数据依赖放在body的字典里<br>空：表示不需要依赖数据<br>12 请求参数：body中的数据，由关键字驱动<br>13 预期结果：与实际结果相比较<br>14 实际结果：有3个值 pass 、fail、空，脚本运行前或run=no的用例该项为空，其值由响应结果和预期结果断言后写入excel所得<br>模块化驱动：<br>包名：tools<br>模块名称：operating_excel.py<br>前提：<br>1.学习python操作excel：<br><a href="https://www.cnblogs.com/zhoujie/p/python18.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhoujie/p/python18.html</a><br>我们只要学会：<br>1.获取sheet的行数 sheet.nrows：即得到case个数，要减一，第一行不算<br>2.获取单元格的内容 sheet.cell_value(row,col)，获得参数的值</p>
<p> 2.学习python写入已存在数据的eccel：<a href="http://blog.csdn.net/hqzxsc2006/article/details/51768351" target="_blank" rel="noopener">http://blog.csdn.net/hqzxsc2006/article/details/51768351</a><br>为什么是已存在：不然每次写入，都会把之前的内容清空。<br>模块名称：operating_json.py<br>由关键字驱动的真实值存储在json中，我们通过引入operating_excel模块<br>可以得到获取关键字的方法，然后通过oprating_json，可以由关键字得到真实的参数<br>前提：<br>学习对json的读操作：<a href="https://www.cnblogs.com/eejron/p/4708980.html" target="_blank" rel="noopener">https://www.cnblogs.com/eejron/p/4708980.html</a><br>我们只要学会读取json文件，读取后取值，json用法跟dictionary类似</p>
<p>模块名称：sendmail.py<br>用例执行完毕后，可以向指定收件群体发送邮件，汇报接口测试成功率<br>可以设置成由接口错误来触发<br>前提：<br>学习使用smtplib发送邮件：<a href="https://www.cnblogs.com/houzhizhe/p/7458960.html" target="_blank" rel="noopener">https://www.cnblogs.com/houzhizhe/p/7458960.html</a><br>我们只要学会发送普通邮件就可以了<br>包名：request<br>模块名称：build_request.py<br>通过引入build_request模块获取构造请求的方法</p>
<p>包名：data<br>模块名称：data_set.py<br>设计通用常量，定义sheet中每个字段中的所在列的值</p>
<p>模块名称：data_get.py<br>通过引入data_get，我们可以得到sheet中的每个单元格的值<br>我们已经定义了operating_excel和operating_json的方法，从data_set中也知道了每个字段的所在列，我们就可以通过遍历每一行（row，col确定一个单元格内容），由operating_excel获取每个单元格的值，由operating_json通过关键字获取json文件中的值(operating_excel、operating_json、data_set是为data_get做辅助的）</p>
<p>模块名称：dependent_case.py<br>设计：根据依赖case_id，读取该case_id所在行，将它的所有数据再读取一遍，构造请求，获取响应数据，根据依赖需要，最终获得依赖数据<br>包名：main<br>模块名称：run_test.py<br>真正执行的测试用例的模块，实现逻辑<br><a href="https://i.loli.net/2019/09/25/Fn5IJerquhLtafo.jpg" target="_blank" rel="noopener" title="逻辑图"><img src="https://i.loli.net/2019/09/25/Fn5IJerquhLtafo.jpg" alt="逻辑图" title="逻辑图"></a></p>
<h1 id="Module-Tree"><a href="#Module-Tree" class="headerlink" title="Module Tree"></a>Module Tree</h1><p><a href="https://i.loli.net/2019/09/25/ZUbNESMtHy8rqXe.png" target="_blank" rel="noopener" title="项目工程树"><img src="https://i.loli.net/2019/09/25/ZUbNESMtHy8rqXe.png" alt="项目工程树" title="项目工程树"></a></p>
<h5 id="谢谢观赏"><a href="#谢谢观赏" class="headerlink" title="谢谢观赏"></a>谢谢观赏</h5>]]></content>
      <categories>
        <category>接口测试</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>//blog/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>


<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
